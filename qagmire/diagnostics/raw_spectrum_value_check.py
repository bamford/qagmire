# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/diagnostics/12_raw_spectrum_value_check.ipynb.

# %% auto 0
__all__ = ['RawSpectrumValueCheck']

# %% ../../nbs/diagnostics/12_raw_spectrum_value_check.ipynb 2
import numpy as np
import xarray as xr

from qagmire.data import (
    get_lr_raw_files,
    read_raw_data,
)
from ..quality_assurance import Diagnostics

# %% ../../nbs/diagnostics/12_raw_spectrum_value_check.ipynb 4
class RawSpectrumValueCheck(Diagnostics):
    """Raw spectrum value check.

    A reproduction of the class with the same name in the weaveio
    [value_checks](https://github.com/bamford/QAG/blob/master/diagnostics/value_checks.py).

    This tests for the following cases:

    * Are there too many pixels saturated above the ADU threshold?
    * Are there negative pixel values?
    * Are there non-finite pixel values?

    for both counts1 and counts2.
    """

    def __init__(
        self,
        saturation_limit_adu: float = 65535,  # the saturation limit in ADU
        n_allowed_saturated_pixels: int = 0,  # the number of allowed saturated pixels per counts array
        **kwargs,  # additional keyword arguments are passed to the `Diagnostics` constructor
    ):
        self.saturation_limit_adu = saturation_limit_adu
        self.n_allowed_saturated_pixels = n_allowed_saturated_pixels
        super().__init__(**kwargs)

    def tests(self, **kwargs):
        files = get_lr_raw_files(**kwargs)
        self.data = read_raw_data(files)
        self.stats = xr.Dataset()
        tests = []
        for i in [1, 2]:
            sat = self.data[f"counts{i}"] >= self.saturation_limit_adu
            self.stats[f"counts{i}_sat"] = sat.sum(dim=["dim_0", "dim_1"])
            neg = self.data[f"counts{i}"] < 0
            self.stats[f"counts{i}_neg"] = neg.sum(dim=["dim_0", "dim_1"])
            nan = ~np.isfinite(self.data[f"counts{i}"])
            self.stats[f"counts{i}_nan"] = nan.sum(dim=["dim_0", "dim_1"])
            tests.extend(
                [
                    {
                        "name": f"too_many_sat_in_counts{i}",
                        "description": f"Are there too many pixels saturated above the ADU threshold in counts{i}?",
                        "test": self.stats[f"counts{i}_sat"]
                        > self.n_allowed_saturated_pixels,
                    },
                    {
                        "name": f"neg_pixels_in_counts{i}",
                        "description": f"Are there negative pixel values in counts{i}?",
                        "test": self.stats[f"counts{i}_neg"] > 0,
                    },
                    {
                        "name": f"nan_pixels_in_counts{i}",
                        "description": f"Are there non-finite pixel values in counts{i}?",
                        "test": self.stats[f"counts{i}_nan"] > 0,
                    },
                ]
            )
        return tests
