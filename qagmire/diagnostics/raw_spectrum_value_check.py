# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/diagnostics/12_raw_spectrum_value_check.ipynb.

# %% auto 0
__all__ = ['RawSpectrumValueCheck']

# %% ../../nbs/diagnostics/12_raw_spectrum_value_check.ipynb 2
import numpy as np
from dask.distributed import Client

from qagmire.data import (
    get_lr_raw_files,
    read_raw_data,
)
from ..quality_assurance import Diagnostics

# %% ../../nbs/diagnostics/12_raw_spectrum_value_check.ipynb 4
class RawSpectrumValueCheck(Diagnostics):
    """Raw spectrum value check.

    A reproduction of the class with the same name in the weaveio
    [value_checks](https://github.com/bamford/QAG/blob/master/diagnostics/value_checks.py).

    This tests for the following cases:

    * Are there too many pixels saturated above the ADU threshold?
    * Are there negative pixel values?
    * Are there non-finite pixel values?

    for both counts1 and counts2.
    """

    def __init__(
        self,
        saturation_limit_adu: float = 65535,  # the saturation limit in ADU
        n_allowed_saturated_pixels: int = 0,  # the number of allowed saturated pixels per counts array
    ):
        self.saturation_limit_adu = saturation_limit_adu
        self.n_allowed_saturated_pixels = n_allowed_saturated_pixels
        super().__init__()

    def tests(self, **kwargs):
        files = get_lr_raw_files(**kwargs)
        data = read_raw_data(files)

        sat = data >= self.saturation_limit_adu
        neg = data < 0
        nan = ~np.isfinite(data)

        count_sat = sat.sum(dim=["dim_0", "dim_1"])
        any_neg = neg.any(dim=["dim_0", "dim_1"])
        any_nan = nan.any(dim=["dim_0", "dim_1"])

        tests = [
            {
                "name": "too_many_sat_in_counts1",
                "description": "Are there too many pixels saturated above the ADU threshold in counts1?",
                "test": count_sat["counts1"] > self.n_allowed_saturated_pixels,
            },
            {
                "name": "neg_pixels_in_counts1",
                "description": "Are there negative pixel values in counts1?",
                "test": any_neg["counts1"],
            },
            {
                "name": "nan_pixels_in_counts1",
                "description": "Are there non-finite pixel values in counts1?",
                "test": any_nan["counts1"],
            },
            {
                "name": "too_many_sat_in_counts2",
                "description": "Are there too many pixels saturated above the ADU threshold in counts2",
                "test": count_sat["counts2"] > self.n_allowed_saturated_pixels,
            },
            {
                "name": "neg_pixels_in_counts2",
                "description": "Are there negative pixel values in counts2?",
                "test": any_neg["counts2"],
            },
            {
                "name": "nan_pixels_in_counts2",
                "description": "Are there non-finite pixel values in counts2?",
                "test": any_nan["counts2"],
            },
        ]
        return tests
