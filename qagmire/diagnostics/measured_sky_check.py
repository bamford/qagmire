# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/diagnostics/16_measured_sky_check.ipynb.

# %% auto 0
__all__ = ['MeasuredSkyCheck']

# %% ../../nbs/diagnostics/16_measured_sky_check.ipynb 3
import numpy as np
import xarray as xr

from qagmire.data import (
    get_lr_l1_stack_files,
    read_fibre_table_nspec,
    read_l1_data,
    read_primary_header,
)
from ..quality_assurance import Diagnostics
from ..utilities import get_mags_from_spectra, parse_obstemp

# %% ../../nbs/diagnostics/16_measured_sky_check.ipynb 5
class MeasuredSkyCheck(Diagnostics):
    """Measured sky check.

    A reproduction of the SkyTrueCheck class in the weaveio
    [sky_true_limit](https://github.com/bamford/QAG/blob/master/diagnostics/sky_true_limit.py).

    This tests for the following cases:

    * Does the measured sky brightness in the raw spectra satisfy the observational requirement?
    * Does the measured sky brightness vary substantially between the sky fibres in an exposure?
    """

    def __init__(
        self,
        variation_limit: float = 0.2,  # the maximum permissible sky-brightness variation in an exposure
        **kwargs,  # additional keyword arguments are passed to the `Diagnostics` constructor
    ):
        self.ap_area = np.pi * (0.65 * 0.65)
        self.variation_limit = variation_limit
        super().__init__(**kwargs)

    def tests(self, **kwargs):
        files = get_lr_l1_stack_files(**kwargs)
        data = read_l1_data(files)
        # merge in info from fibre_table
        fibre_table = read_fibre_table_nspec(files)
        data = xr.merge((data, fibre_table))
        data = data.where(data["TARGUSE"] == b"S")
        self.fibre_table = fibre_table
        # merge in observational requirements
        hdr = read_primary_header(files)
        obs = parse_obstemp(hdr["OBSTEMP"])
        data = xr.merge((data, obs))
        # limit the dataset to the blue camera
        data = data.sel(filename=(data["CAMERA"] == "BLUE"), drop=True)
        data = data.drop_dims("LAMBDA_R")
        # perform the tests by OBID, rather than filename
        data = data.swap_dims(filename="OBID")

        data["flam"] = data["BLUE_FLUX_NOSS"] * data["BLUE_SENSFUNC"] / self.ap_area
        data["mag_obs"] = get_mags_from_spectra(
            data["LAMBDA_B"], data["flam"], band="GROUND_JOHNSON_V"
        )
        self.data = data

        self.stats = xr.Dataset(
            {
                "median_sky": data["mag_obs"].median("NSPEC"),
                "sky_limit": data["sky_brightness"],
                "sigma_sky": data["mag_obs"].std("NSPEC"),
            }
        )

        tests = [
            {
                "name": "sky_too_bright",
                "description": "Does the measured sky brightness in the raw spectra "
                "satisfy the observational requirement?",
                "test": self.stats["median_sky"] < self.stats["sky_limit"],
            },
            {
                "name": "sky_too_variable",
                "description": "Does the measured sky brightness vary substantially "
                f"(> {self.variation_limit} mag) between the sky fibres for each OB?",
                "test": self.stats["sigma_sky"] > self.variation_limit,
            },
        ]
        return tests
