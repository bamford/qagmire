# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_utilities.ipynb.

# %% auto 0
__all__ = ['parse_obstemp', 'parse_line_names']

# %% ../nbs/03_utilities.ipynb 2
import numpy as np
import xarray as xr

# %% ../nbs/03_utilities.ipynb 5
def parse_obstemp(
    codes: xr.DataArray,  # a DataArray of OBSTEMP codes
) -> dict:  # the numerical value for each observing constraint
    """Convert an OBSTEMP `code` to a dictionary of constraint values."""
    lookup = dict(
        seeing={
            "A": 0.7,
            "B": 0.8,
            "C": 0.9,
            "D": 1.0,
            "E": 1.1,
            "F": 1.2,
            "G": 1.3,
            "H": 1.4,
            "I": 1.5,
            "J": 1.6,
            "K": 1.7,
            "L": 1.8,
            "M": 1.9,
            "N": 2.0,
            "O": 2.1,
            "P": 2.2,
            "Q": 2.3,
            "R": 2.4,
            "S": 2.5,
            "T": 2.6,
            "U": 2.7,
            "V": 2.8,
            "W": 2.9,
            "X": 3.0,
        },
        transparency={"A": 0.8, "B": 0.7, "C": 0.6, "D": 0.5, "E": 0.4},
        elevation={
            "A": 50.28,
            "B": 45.58,
            "C": 41.81,
            "D": 35.68,
            "E": 33.75,
            "F": 25.00,
        },
        lunar_angle={"A": 90, "B": 70, "C": 50, "D": 30, "E": 0},
        sky_brightness={
            "A": 21.7,
            "B": 21.5,
            "C": 21.0,
            "D": 20.5,
            "E": 19.6,
            "F": 18.5,
            "G": 17.7,
        },
    )

    cols = dict()
    for i, k in enumerate(lookup):
        v = [lookup[k][c[i]] for c in codes.to_numpy()]
        cols[k] = xr.Variable(codes.dims, v)
    cols["airmass"] = np.round(1 / np.cos(np.radians(90 - cols["elevation"])), 1)
    return xr.Dataset(cols, codes.coords)

# %% ../nbs/03_utilities.ipynb 8
def parse_line_names(
    lines: xr.DataArray,  # a DataArray of line names, e.g. [OIII]_5006.77
) -> tuple[xr.DataArray, xr.DataArray]:  # the species and wavelength of each line
    """Split the line names into species and restframe wavelength."""
    lines = lines.astype(str)
    line_species, line_rest_wl = lines.str.split(dim="", sep="_").T
    line_rest_wl = line_rest_wl.astype(float)
    return line_species, line_rest_wl
